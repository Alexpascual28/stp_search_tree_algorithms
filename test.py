import other_problems.maze_problem.sample_mazes as sample_mazes

def get_surrounding_squares(position):
    x, y = position

    for x, y in [(x-1, y-1), (x, y-1), (x+1, y-1), (x-1, y), (x+1, y), (x-1, y+1), (x, y+1), (x+1, y+1)]:
        if x >= 0 and y >= 0:
            yield x, y

surrounding_squares = get_surrounding_squares((3, 5))

x = len(sample_mazes.maze_initial_state_1[0])
y = len(sample_mazes.maze_initial_state_1)

print(sample_mazes.maze_initial_state_1[y-1][x-1])
print(list(surrounding_squares))

test_maze = [[-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],
             [-2,  0,  0,  0,  0, -2,  0,  0,  0,  0,  0, -2,  0, -2, -2,  0, -2,  0,  0,  0,  0,  0, -2,  0,  0,  0,  0,  0,  0, -2,  0, -2],
             [-2,  0, -2, -2,  0, -2, -2, -2,  0, -2,  0,  0,  0,  0,  0,  0, -2, -2,  0, -2, -2,  0, -2,  0, -2, -2, -2,  0, -2, -2,  0, -2],
             [-2,  0, -2,  0,  0,  0,  0, -2,  0, -2, -2, -2,  0, -2, -2,  0,  0,  0,  0, -2, -2,  0,  0,  0, -2,  0, -2,  0, -2,  0,  0, -2],
             [-2,  0, -2, -2, -2, -2,  0, -2,  0,  0, -2, -2,  0, -2, -2,  0, -2, -2,  0, -2,  0,  0, -2,  0, -2,  0, -2,  0, -2,  0, -2, -2],
             [-2,  0,  0,  0, -3, -2,  0, -2, -2,  0, -2, -2,  0,  0, -2,  0, -2, -2, -2, -2, -2, -2, -2, -2, -2,  0, -2,  0,  0,  0,  0, -2],
             [-2,  0, -2, -2, -2, -2,  0, -2,  0,  0,  0, -2,  0, -2, -2,  0, -2,  0,  0, -2,  0,  0,  0,  0,  0,  0, -2, -2, -2, -2,  0, -2],
             [-2,  0, -2,  0,  0,  0,  0, -2, -2, -2,  0, -2,  0, -2, -2,  0, -2, -2,  0,  0,  0, -2, -2, -2, -2,  0, -2,  0, -2, -2,  0, -2],
             [-2,  0, -2,  0, -2, -2, -2, -2,  0, -2,186, -2,  0,187,  0,  0, -2, -2,200, -2,  0,  0,  0,  0,  0,  0, -2,  0,  0,  0,  0, -2],
             [-2, -2, -2,  0, -2,  0,  0,  0,  0, -2, 37, -2, -2, -2,  0, -2, -2,  0,  0, -2,  0, -2, -2, -2, -2, -2, -2,  0, -2, -2, -2, -2],
             [-2,  0,  0,  0, -2,  0, -2, -2,  0, -2,  4, -2,  0, -2,  0, -2, -2,  0, -2, -2,  0, -2, -2,  0, -2,  0, -2,  0,  0,  0,  0, -2],
             [-2,  0, -2, -2, -2,  0, -2, -2,  0, -2,  0, -2,  0, -2,  0,  0, -2,  0,  0, -2,  0, -2,  0,  0,  0,  0, -2, -2,  0, -2,  0, -2],
             [-2,  0,  0,  0,  0,  0, -2, -2,  0, -2,  0, -2,  0, -2, -2,  0, -2, -2,  0, -2,  0, -2,  0, -2,  0, -2, -2, -2, -2, -2,  0, -2],
             [-2,  0, -2, -2, -2,  0, -2, -2,  0, -2,  0, -2,  0,  0, -2,  0,  0,  0,  0, -2,  0,  0,  0, -2,  0,  0, -2,  0, -2, -2,  0, -2],
             [-2,  0,  0,  0, -2,  0, -2, -2,  0,  0,  0, -2, -2,  0, -2,  0, -2,  0, -2, -2, -2, -2, -2, -2, -2,  0, -2,  0,  0,  0,  0, -2],
             [-2, -2,  0, -2, -2, -2, -2, -2,  0, -2,  0, -2,  0,  0,  0,  0, -2,  0, -2,  0, -2, -2, -2,  0,  0,  0, -2, -2,  0, -2,  0, -2],
             [-2, -2,  0, -2,  0,  0, -2,  0,  0, -2,  0, -2,  0, -2,  0, -2, -2, -2, -2,  0, -2, -2, -2,  0, -2, -2, -2, -2,  0, -2, -2, -2],
             [-2, -2,  0, -2,  0, -2, -2, -2,  0, -2, -2, -2,  0, -2,  0, -2, -2,  0,  0,  0,  0,  0,  0,  0, -2, -2, -2, -2,  0, -2, -1, -2],
             [-2, -2,  0, -2,  0,  0,  0,  0,  0, -2,  0, -2,  0, -2,  0,  0, -2, -2,  0, -2, -2,  0, -2, -2, -2, -2, -2, -2,  0, -2,  0, -2],
             [-2,  0,  0, -2, -2,  0, -2, -2, -2, -2,  0, -2, -2, -2,  0, -2, -2, -2,  0, -2, -2,  0, -2, -2,  0,  0,  0,  0,  0, -2,  0, -2],
             [-2,  0, -2, -2,  0,  0, -2,  0,  0,  0,  0, -2,  0,  0,  0,  0, -2,  0,  0, -2,  0,  0, -2,  0,  0, -2,  0, -2, -2, -2,  0, -2],
             [-2,  0,  0,  0,  0, -2, -2,  0, -2,  0, -2, -2,  0, -2, -2,  0, -2,  0, -2, -2, -2, -2, -2,  0, -2, -2,  0,  0, -2, -2,  0, -2],
             [-2, -2,  0, -2,  0,  0,  0,  0, -2,  0, -2, -2,  0,  0,  0,  0, -2,  0,  0,  0,  0,  0,  0,  0, -2, -2, -2,  0,  0,  0,  0, -2],
             [-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2],]

def print_board_state(board):
    for row in board:
        for square in row:
            if square == -2:
                print("%4s" % "████", end='')
            elif square == -1:
                print("%4s" % "[S]", end='')
            elif square == -3:
                print("%4s" % "[G]", end='')
            else:
                print("%4i" % square, end='')
        print()

print_board_state(test_maze)