======= Running Python Queue-Based Search Procedure =======
===== by: Alejandro Pascual San Roman, SID: 201255350 =====

Queen Domination Problem ( 10 x 12 board):
What is the minimum number of queens required to control this  10 * 12  board?

Strategy: ('A_star', <function empty_squares_heuristic at 0x0000027090DA94C0>)
Search Limit: max_nodes = 5000
Options: []
*** starting search ***
0  
GOAL STATE:
  0  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  1  0  0  0
  0  0  0  0  1  0  0  0  0  0
  0  0  1  0  0  0  0  0  0  0
  0  0  0  0  0  1  0  0  0  0
  0  0  0  1  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  1
  0  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  0
  0  0  0  0  0  0  0  0  0  1

The minimum number of queens to cover a  10 * 12  chessboard is equal to the "Path Length" below:

:-)) *SUCCESS* ((-:
The action path to the solution is:
(5, 6), (4, 4), (3, 7), (6, 3), (2, 5), (9, 11), (9, 8)
Path length = 7
Total nodes tested = 8
Time taken = 0.046875 seconds

======= Running Python Queue-Based Search Procedure =======
===== by: Alejandro Pascual San Roman, SID: 201255350 =====
The Knight's Tour ( 5 x 5 board)
Strategy: depth_first
Search Limit: max_nodes = 500000
Options: ['loop_check']
*** starting search ***
0  1000  2000  3000  4000  5000  6000  7000  8000  9000  10000  11000  12000  13000  14000  15000  16000  17000  18000  19000  20000  21000  22000  23000  24000  25000  26000  27000  28000  29000  30000  31000  32000  33000  34000  35000  36000  37000  38000  39000  40000  41000  42000  43000  44000  45000  46000  47000  48000  49000  50000  51000  52000  53000  54000  55000  56000  57000  58000  59000  60000  61000  62000  63000  64000  65000  66000  67000  68000  69000  70000  71000  72000  73000  74000  75000  76000  77000  78000  79000  80000  81000  82000  83000  84000  85000  86000  87000  88000  89000  90000  91000  92000  93000  94000  95000  96000  97000  98000  99000  100000  101000  102000  103000  104000  105000  106000  107000  108000  109000  110000  111000  112000  113000  114000  115000  116000  117000  118000  119000  120000  121000  122000  123000  124000  125000  126000  127000  128000  129000  130000  131000  132000  133000  134000  135000  136000  137000  138000  139000  140000  141000  142000  143000  144000  145000  146000  147000  148000  149000  150000  151000  152000  153000  154000  155000  156000  157000  158000  159000  160000  161000  162000  163000  164000  165000  166000  167000  168000  169000  170000  171000  172000  173000  174000  175000  176000  177000  178000  179000  180000  181000  182000  183000  184000  185000  186000  187000  188000  189000  190000  191000  192000  193000  194000  195000  196000  197000  198000  199000  200000  201000  202000  203000  204000  205000  206000  207000  208000  209000  210000  211000  212000  213000  214000  215000  216000  217000  218000  219000  220000  221000  222000  223000  224000  225000  226000  227000  228000  229000  230000  231000  232000  233000  234000  235000  236000  237000  238000  239000  240000  241000  242000  243000  244000  245000  246000  247000  248000  249000  250000  251000  252000  253000  254000  255000  256000  257000  258000  259000  260000  261000  262000  263000  264000  265000  266000  267000  268000  269000  270000  271000  272000  273000  274000  275000  276000  277000  278000  279000  280000  281000  282000  283000  284000  285000  286000  287000  288000  289000  290000  291000  292000  293000  294000  295000  296000  297000  298000  299000  300000  301000  302000  303000  304000  305000  
GOAL STATE:
  1 20 13  8  3
 12  7  2 19 14
 21 24 15  4  9
 16 11  6 23 18
 25 22 17 10  5

:-)) *SUCCESS* ((-:
The action path to the solution is:
[0, 0], (1, 2), (-1, 2), (2, -1), (2, 1), (-1, -2), (-2, -1), (-1, 2), (2, 1), (2, -1), (-1, -2), (-2, -1), (-1, 2), (1, 2), (1, -2), (1, -2), (1, 2), (-1, 2), (-2, -1), (-1, -2), (2, -1), (2, 1), (-1, 2), (-1, -2), (2, -1)
Path length = 25
Total nodes tested = 305413
Time taken = 9.59375 seconds

======= Running Python Queue-Based Search Procedure =======
===== by: Alejandro Pascual San Roman, SID: 201255350 =====
The sliding tile 8 puzzle
Strategy: breadth_first
Search Limit: max_nodes = 50000
Options: ['loop_check']
*** starting search ***
0  1000  2000  3000  4000  5000  6000  7000  8000  9000  10000  11000  12000  13000  14000  15000  16000  17000  18000  
:-)) *SUCCESS* ((-:
The action path to the solution is:
down, right, down, left, up, up, right, down, left, left, down, right, up, left, up
Path length = 15
Total nodes tested = 18544
Time taken = 0.953125 seconds

======= Running Python Queue-Based Search Procedure =======
===== by: Alejandro Pascual San Roman, SID: 201255350 =====
The List Fill Problem
 List Size:  10
Strategy: depth_first
Search Limit: max_nodes = 100000
Options: ['loop_check']
*** starting search ***
0  
:-)) *SUCCESS* ((-:
The action path to the solution is:
0, 1, 2, 3, 4, 5, 6, 7, 8, 9
Path length = 10
Total nodes tested = 11
Time taken = 0.0 seconds

======= Running Python Queue-Based Search Procedure =======
===== by: Alejandro Pascual San Roman, SID: 201255350 =====
The Fill Problem -- 2D version
 Array Size:  10
Strategy: depth_first
Search Limit: max_nodes = 100000
Options: ['loop_check']
*** starting search ***
0  
:-)) *SUCCESS* ((-:
The action path to the solution is:
(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9), (1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8), (5, 9), (6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8), (6, 9), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8), (7, 9), (8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8), (8, 9), (9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)
Path length = 100
Total nodes tested = 101
Time taken = 0.140625 seconds

